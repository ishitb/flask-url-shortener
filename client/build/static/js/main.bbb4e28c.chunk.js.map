{"version":3,"sources":["components/Loader.js","App.js","reportWebVitals.js","models/accountModel.js","models/loaderModel.js","models/index.js","models/linkModel.js","index.js"],"names":["Loader","loader_shown","useStoreState","store","loaderModel","defaultOptions","loop","autoplay","animationData","loadingAnim","rendererSettings","preserveAspectRatio","createPortal","className","options","height","speed","width","isStopped","document","getElementById","Navbar","lazy","SignIn","Home","Furls","window","injectStyle","App","useState","signingIn","setSigningIn","fallback","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","user_logged_in","token","user_data","login","thunk","actions","a","email","password","toggleLoader","goBack","setError","fetch","method","headers","Headers","Accept","body","JSON","stringify","resp","json","res","status","setToken","setUserData","user","toast","success","error","message","console","log","logout","catch","e","finally","register","password2","name","verifyUser","undefined","savedToken","cookies","load","Authorization","err","action","state","save","expires","Date","data","remove","toggle","accountModel","linkModel","stored_links","editingLink","open","id","retrieveLinks","setLinks","editLink","updates","original","back","shortRef","ogRef","short","current","value","updateLink","deleteLink","delete","updateLinks","link","links","toggleEditor","updatedLink","index","findIndex","_id","$oid","curr","filter","createStore","persist","model","allow","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bbb4e28c.chunk.js","sourcesContent":["import { createPortal } from 'react-dom';\r\nimport { useStoreState } from 'easy-peasy';\r\nimport Lottie from 'react-lottie';\r\n\r\nimport loadingAnim from '../assets/loader.json';\r\n\r\nimport '../styles/Loader.css';\r\n\r\nconst Loader = () => {\r\n    const loader_shown = useStoreState(\r\n        (store) => store.loaderModel.loader_shown\r\n    );\r\n\r\n    const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: loadingAnim,\r\n        rendererSettings: {\r\n            preserveAspectRatio: 'xMidYMid slice',\r\n        },\r\n    };\r\n\r\n    return createPortal(\r\n        <div\r\n            className={`loading ${\r\n                loader_shown ? 'shown' : ''\r\n            }`}\r\n        >\r\n            <div className='lottie confetti'>\r\n                <Lottie\r\n                    options={defaultOptions}\r\n                    height={400}\r\n                    speed={2}\r\n                    width={400}\r\n                    isStopped={!loader_shown}\r\n                />\r\n            </div>\r\n        </div>,\r\n        document.getElementById('loader')\r\n    );\r\n};\r\n\r\nexport default Loader;\r\n","import { Suspense, lazy, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport { injectStyle } from 'react-toastify/dist/inject-style';\n\nimport Loader from './components/Loader';\n\nimport './App.css';\n\nconst Navbar = lazy(() => import('./components/Navbar'));\nconst SignIn = lazy(() => import('./components/SignIn'));\nconst Home = lazy(() => import('./components/Home'));\nconst Furls = lazy(() => import('./components/Furls'));\n\nif (typeof window !== 'undefined') {\n    injectStyle();\n}\n\nfunction App() {\n    const [signingIn, setSigningIn] = useState(false);\n\n    return (\n        <Suspense fallback={<Loader />}>\n            <div className='App background-main'>\n                <Navbar setSigningIn={setSigningIn} />\n                <div className='background'>\n                    <ul className='circles'>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                    </ul>\n                </div>\n                <ToastContainer />\n                <Switch>\n                    <Route\n                        exact\n                        path='/'\n                        component={Home}\n                    />\n                    <Route path='/*' component={Furls} />\n                </Switch>\n            </div>\n\n            <SignIn\n                signingIn={signingIn}\n                setSigningIn={setSigningIn}\n            />\n            <Loader />\n        </Suspense>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { thunk, action } from 'easy-peasy';\nimport cookies from 'react-cookies';\nimport { toast } from 'react-toastify';\n\n// eslint-disable-next-line\nexport default {\n    // STORE\n    user_logged_in: false,\n    token: null,\n    user_data: {},\n\n    // THUNKS\n    login: thunk(\n        async (\n            actions,\n            {\n                email,\n                password,\n                toggleLoader,\n                goBack,\n                setError,\n            }\n        ) => {\n            toggleLoader(true);\n\n            fetch(`/auth/login`, {\n                method: 'POST',\n                headers: new Headers({\n                    'Content-Type': 'application/json',\n                    Accept: 'application/json',\n                }),\n                body: JSON.stringify({\n                    email: email,\n                    password: password,\n                }),\n            })\n                .then(async (resp) => {\n                    const res = await resp.json();\n\n                    if (resp.status === 202) {\n                        actions.setToken(res.token);\n                        actions.setUserData(res.user);\n                        toast.success(\n                            'Logged in Successfully!'\n                        );\n                        goBack();\n                    } else {\n                        toast.error(res.message);\n                        if (res['error-type'] !== 'server')\n                            setError(res['error-type']);\n                        console.log(res);\n                        actions.logout();\n                    }\n                })\n                .catch((e) => {\n                    toast.error('Internal Server Error');\n                    // console.log(e);\n                    actions.logout();\n                })\n                .finally(() => {\n                    toggleLoader(false);\n                });\n        }\n    ),\n\n    register: thunk(\n        async (\n            actions,\n            {\n                email,\n                password,\n                password2,\n                name,\n                toggleLoader,\n                setError,\n                goBack,\n            }\n        ) => {\n            toggleLoader(true);\n\n            // ! ERROR TYPES :\n            // ! 0 ==> Email Error\n            // ! 1 ==> Password Error\n            // ! 2 ==> Name Error\n\n            setError(3);\n\n            if (password !== password2) {\n                setError(1);\n                toast.error(\"Passwords don't match!\");\n                return;\n            }\n\n            fetch(`/auth/register`, {\n                method: 'POST',\n                headers: new Headers({\n                    'Content-Type': 'application/json',\n                    Accept: 'application/json',\n                }),\n                body: JSON.stringify({\n                    email: email,\n                    password: password,\n                    name: name,\n                }),\n            })\n                .then(async (resp) => {\n                    const res = await resp.json();\n\n                    if (resp.status === 201) {\n                        actions.setToken(res.token);\n                        actions.setUserData(res.user);\n                        toast.success(\n                            'Registered in successfully'\n                        );\n                        goBack();\n                    } else {\n                        toast.error(res.message);\n\n                        if (res['error-type'] !== 'server')\n                            setError(res['error-type']);\n\n                        console.log(res);\n                        actions.logout();\n                    }\n                })\n                .catch((e) => {\n                    toast.error('Internal Server Error');\n                    console.log(e);\n                    actions.logout();\n                    toggleLoader(false);\n                })\n                .finally(() => toggleLoader(false));\n        }\n    ),\n\n    verifyUser: thunk(async (actions) => {\n        let savedToken = cookies.load('Token');\n\n        if (savedToken === undefined) {\n            actions.logout();\n        } else\n            fetch(`/auth/verify`, {\n                method: 'GET',\n                headers: new Headers({\n                    'Content-Type': 'application/json',\n                    Authorization: savedToken,\n                }),\n            })\n                .then(\n                    async (res) => {\n                        let resp = await res.json();\n\n                        if (res.status === 202)\n                            actions.setUserData(resp);\n                        else {\n                            actions.logout();\n                        }\n                    },\n                    (err) => {\n                        // console.log(err);\n                        actions.logout();\n                    }\n                )\n                .catch((e) => {\n                    // console.log(e);\n                    actions.logout();\n                });\n    }),\n\n    // ACTIONS\n    setToken: action(async (state, token) => {\n        cookies.save('Token', `Token ${token}`, {\n            expires: new Date('05-03-2022'),\n        });\n        state.token = token;\n    }),\n    setUserData: action(async (state, data) => {\n        const token = cookies.load('Token');\n        state.token = token;\n        state.user_logged_in = true;\n        state.user_data = data;\n    }),\n    logout: action((state) => {\n        // console.log('Logging out');\n        cookies.remove('Token');\n        state.user_logged_in = false;\n        state.token = null;\n        state.user_data = {};\n    }),\n};\n","import { action } from 'easy-peasy';\n\nconst loaderModel = {\n    // STORE\n    loader_shown: false,\n\n    // ACTIONS\n    toggleLoader: action((state, toggle) => {\n        state.loader_shown = toggle;\n    }),\n};\n\nexport default loaderModel;\n","import accountModel from './accountModel';\nimport loaderModel from './loaderModel';\nimport linkModel from './linkModel';\n\nconst store = {\n    accountModel,\n    loaderModel,\n    linkModel,\n};\n\nexport default store;\n","import { thunk, action } from 'easy-peasy';\nimport cookies from 'react-cookies';\nimport { toast } from 'react-toastify';\n\n// eslint-disable-next-line\nexport default {\n    // STORE\n    stored_links: [],\n    editingLink: {\n        open: false,\n        id: {},\n    },\n\n    // THUNKS\n    retrieveLinks: thunk(async (actions, toggleLoader) => {\n        const token = cookies.load('Token');\n\n        toggleLoader(true);\n\n        fetch(`/api/urls`, {\n            method: 'GET',\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                Authorization: token,\n            }),\n        })\n            .then(async (res) => {\n                const resp = await res.json();\n\n                if (res.status !== 200) {\n                    console.log(resp);\n                    toast.error(resp.message);\n                } else {\n                    actions.setLinks(resp);\n                }\n            })\n            .catch((e) => {\n                toast.error('Internal Server Error');\n                console.log(e);\n            })\n            .finally(() => toggleLoader(false));\n    }),\n\n    editLink: thunk(\n        async (\n            actions,\n            {\n                id,\n                updates,\n                original,\n                toggleLoader,\n                setError,\n                back,\n                shortRef,\n                ogRef,\n            }\n        ) => {\n            if (\n                updates.short === original.short &&\n                updates.original === original.original\n            )\n                return;\n            const token = cookies.load('Token');\n\n            toggleLoader(true);\n\n            fetch(`/api/urls/${id}`, {\n                method: 'PATCH',\n                headers: new Headers({\n                    'Content-Type': 'application/json',\n                    Authorization: token,\n                }),\n                body: JSON.stringify(updates),\n            })\n                .then(async (res) => {\n                    const resp = await res.json();\n\n                    if (res.status !== 202) {\n                        console.log(resp);\n                        toast.error(resp.message);\n\n                        ogRef.current.value =\n                            original.original;\n                        shortRef.current.value =\n                            original.short;\n\n                        if (\n                            resp['error-type'] === 'short'\n                        ) {\n                            setError(true);\n                        }\n                    } else {\n                        toast.success(\n                            'Link Updated Successfully!'\n                        );\n                        actions.updateLink({\n                            original,\n                            updates,\n                        });\n                        back();\n                    }\n                })\n                .catch((e) => {\n                    toast.error('Internal Server Error');\n                    console.log(e);\n                })\n                .finally(() => {\n                    toggleLoader(false);\n                });\n        }\n    ),\n\n    deleteLink: thunk(\n        async (actions, { id, toggleLoader }) => {\n            const token = cookies.load('Token');\n\n            toggleLoader(true);\n\n            fetch(`/api/urls/${id}`, {\n                method: 'DELETE',\n                headers: new Headers({\n                    'Content-Type': 'application/json',\n                    Authorization: token,\n                }),\n            })\n                .then(async (res) => {\n                    const resp = await res.json();\n\n                    if (res.status !== 200) {\n                        console.log(resp);\n                        toast.error(resp.message);\n                    } else {\n                        toast.success(\n                            'Link Deleted Successfully!'\n                        );\n\n                        actions.delete(id);\n                    }\n                })\n                .catch((e) => {\n                    toast.error('Internal Server Error');\n                    console.log(e);\n                })\n                .finally(() => toggleLoader(false));\n        }\n    ),\n\n    // ACTIONS\n    updateLinks: action((state, link) => {\n        console.log('Hey');\n        console.log(link);\n        state.stored_links = [...state.stored_links, link];\n    }),\n    setLinks: action((state, links) => {\n        state.stored_links = [...links];\n    }),\n    toggleEditor: action((state, toggle) => {\n        state.editingLink = toggle;\n    }),\n    updateLink: action((state, { original, updates }) => {\n        let updatedLink = { ...original };\n\n        console.log({ updatedLink, updates });\n\n        if (updates.short !== undefined) {\n            updatedLink.short = updates.short;\n        }\n        if (updates.original !== undefined) {\n            updatedLink.original = updates.original;\n        }\n\n        let index = state.stored_links.findIndex(\n            (link) => link._id.$oid === original._id.$oid\n        );\n        console.log(index);\n\n        let curr = state.stored_links;\n        curr[index] = updatedLink;\n        state.stored_links = curr;\n    }),\n    delete: action((state, id) => {\n        state.stored_links = state.stored_links.filter(\n            (link) => {\n                return link._id.$oid !== id;\n            }\n        );\n    }),\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n    StoreProvider,\n    createStore,\n    persist,\n} from 'easy-peasy';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport model from './models';\n\nconst store = createStore(\n    persist(model, { allow: ['accountModel'] })\n);\n\nReactDOM.render(\n    <React.StrictMode>\n        <StoreProvider store={store}>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </StoreProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}