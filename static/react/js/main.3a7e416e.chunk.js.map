{"version":3,"sources":["components/Loader.js","App.js","reportWebVitals.js","models/index.js","models/accountModel.js","models/loaderModel.js","index.js"],"names":["Loader","loader_shown","useStoreState","store","loaderModel","createPortal","className","document","getElementById","Navbar","lazy","SignIn","Home","window","injectStyle","App","useState","signingIn","setSigningIn","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","accountModel","user_logged_in","token","user_data","login","thunk","actions","a","email","password","toggleLoader","goBack","setError","fetch","method","headers","Headers","Accept","body","JSON","stringify","resp","json","res","status","console","log","setToken","setUserData","user","toast","success","error","message","logout","catch","e","finally","register","password2","name","verifyUser","savedToken","cookies","load","undefined","Authorization","err","action","state","save","expires","Date","data","remove","toggle","createStore","persist","model","allow","ReactDOM","render","StrictMode"],"mappings":"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","file":"js/main.3a7e416e.chunk.js","sourcesContent":["import { createPortal } from 'react-dom';\r\nimport { useStoreState } from 'easy-peasy';\r\n\r\nimport '../styles/Loader.css';\r\n\r\nconst Loader = () => {\r\n    const loader_shown = useStoreState(\r\n        (store) => store.loaderModel.loader_shown\r\n    );\r\n\r\n    return createPortal(\r\n        <div\r\n            className={`loading ${\r\n                loader_shown ? 'shown' : ''\r\n            }`}\r\n        >\r\n            <div className='loader'>\r\n                <div className='inner'></div>\r\n            </div>\r\n        </div>,\r\n        document.getElementById('loader')\r\n    );\r\n};\r\n\r\nexport default Loader;\r\n","import { Suspense, lazy, useState } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport { injectStyle } from 'react-toastify/dist/inject-style';\n\nimport Loader from './components/Loader';\n\nimport './App.css';\n\nconst Navbar = lazy(() => import('./components/Navbar'));\nconst SignIn = lazy(() => import('./components/SignIn'));\nconst Home = lazy(() => import('./components/Home'));\n\nif (typeof window !== 'undefined') {\n    injectStyle();\n}\n\nfunction App() {\n    const [signingIn, setSigningIn] = useState(false);\n\n    return (\n        <Suspense fallback={<Loader />}>\n            <div className='App background-main'>\n                <ToastContainer />\n                <Navbar setSigningIn={setSigningIn} />\n                <Home />\n            </div>\n            <SignIn\n                signingIn={signingIn}\n                setSigningIn={setSigningIn}\n            />\n            <Loader />\n        </Suspense>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import accountModel from './accountModel';\r\nimport loaderModel from './loaderModel';\r\n\r\nconst store = {\r\n    accountModel: accountModel,\r\n    loaderModel: loaderModel,\r\n};\r\n\r\nexport default store;\r\n","import { thunk, action } from 'easy-peasy';\r\nimport cookies from 'react-cookies';\r\nimport { toast } from 'react-toastify';\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n    // STORE\r\n    user_logged_in: false,\r\n    token: null,\r\n    user_data: {},\r\n\r\n    // THUNKS\r\n    login: thunk(\r\n        async (\r\n            actions,\r\n            {\r\n                email,\r\n                password,\r\n                toggleLoader,\r\n                goBack,\r\n                setError,\r\n            }\r\n        ) => {\r\n            toggleLoader(true);\r\n\r\n            fetch(`/auth/login`, {\r\n                method: 'POST',\r\n                headers: new Headers({\r\n                    'Content-Type': 'application/json',\r\n                    Accept: 'application/json',\r\n                }),\r\n                body: JSON.stringify({\r\n                    email: email,\r\n                    password: password,\r\n                }),\r\n            })\r\n                .then(async (resp) => {\r\n                    const res = await resp.json();\r\n\r\n                    if (resp.status === 202) {\r\n                        console.log(res);\r\n                        actions.setToken(res.token);\r\n                        actions.setUserData(res.user);\r\n                        toast.success(\r\n                            'Logged in Successfully!'\r\n                        );\r\n                        goBack();\r\n                    } else {\r\n                        toast.error(res.message);\r\n                        if (res['error-type'] !== 'server')\r\n                            setError(res['error-type']);\r\n                        console.log(res);\r\n                        actions.logout();\r\n                    }\r\n                })\r\n                .catch((e) => {\r\n                    toast.error('Internal Server Error');\r\n                    // console.log(e);\r\n                    actions.logout();\r\n                })\r\n                .finally(() => {\r\n                    toggleLoader(false);\r\n                });\r\n        }\r\n    ),\r\n\r\n    register: thunk(\r\n        async (\r\n            actions,\r\n            {\r\n                email,\r\n                password,\r\n                password2,\r\n                name,\r\n                toggleLoader,\r\n                setError,\r\n                goBack,\r\n            }\r\n        ) => {\r\n            toggleLoader(true);\r\n\r\n            // ! ERROR TYPES :\r\n            // ! 0 ==> Email Error\r\n            // ! 1 ==> Password Error\r\n            // ! 2 ==> Name Error\r\n\r\n            setError(3);\r\n\r\n            if (password !== password2) {\r\n                setError(1);\r\n                toast.error(\"Passwords don't match!\");\r\n                return;\r\n            }\r\n\r\n            fetch(`/auth/register`, {\r\n                method: 'POST',\r\n                headers: new Headers({\r\n                    'Content-Type': 'application/json',\r\n                    Accept: 'application/json',\r\n                }),\r\n                body: JSON.stringify({\r\n                    email: email,\r\n                    password: password,\r\n                    name: name,\r\n                }),\r\n            })\r\n                .then(async (resp) => {\r\n                    const res = await resp.json();\r\n\r\n                    if (resp.status === 201) {\r\n                        console.log(res);\r\n                        actions.setToken(res.token);\r\n                        actions.setUserData(res.user);\r\n                        toast.success(\r\n                            'Registered in successfully'\r\n                        );\r\n                        goBack();\r\n                    } else {\r\n                        toast.error(res.message);\r\n\r\n                        if (res['error-type'] !== 'server')\r\n                            setError(res['error-type']);\r\n\r\n                        console.log(res);\r\n                        actions.logout();\r\n                    }\r\n                })\r\n                .catch((e) => {\r\n                    toast.error('Internal Server Error');\r\n                    console.log(e);\r\n                    actions.logout();\r\n                    toggleLoader(false);\r\n                })\r\n                .finally(() => toggleLoader(false));\r\n        }\r\n    ),\r\n\r\n    verifyUser: thunk(async (actions) => {\r\n        let savedToken = cookies.load('Token');\r\n        console.log('Hello');\r\n\r\n        if (savedToken === undefined) {\r\n            actions.logout();\r\n        } else\r\n            fetch(`/auth/verify`, {\r\n                method: 'GET',\r\n                headers: new Headers({\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: savedToken,\r\n                }),\r\n            })\r\n                .then(\r\n                    async (res) => {\r\n                        let resp = await res.json();\r\n                        console.log(resp);\r\n\r\n                        if (res.status === 202)\r\n                            actions.setUserData(resp);\r\n                        else {\r\n                            actions.logout();\r\n                        }\r\n                    },\r\n                    (err) => {\r\n                        // console.log(err);\r\n                        actions.logout();\r\n                    }\r\n                )\r\n                .catch((e) => {\r\n                    // console.log(e);\r\n                    actions.logout();\r\n                });\r\n    }),\r\n\r\n    // ACTIONS\r\n    setToken: action(async (state, token) => {\r\n        cookies.save('Token', `Token ${token}`, {\r\n            expires: new Date('05-03-2022'),\r\n        });\r\n        state.token = token;\r\n    }),\r\n    setUserData: action(async (state, data) => {\r\n        const token = cookies.load('Token');\r\n        state.token = token;\r\n        state.user_logged_in = true;\r\n        state.user_data = data;\r\n    }),\r\n    logout: action((state) => {\r\n        // console.log('Logging out');\r\n        cookies.remove('Token');\r\n        state.user_logged_in = false;\r\n        state.token = null;\r\n        state.user_data = {};\r\n    }),\r\n};\r\n","import { action } from 'easy-peasy';\r\n\r\nconst loaderModel = {\r\n    // STORE\r\n    loader_shown: false,\r\n\r\n    // ACTIONS\r\n    toggleLoader: action((state, toggle) => {\r\n        state.loader_shown = toggle;\r\n    }),\r\n};\r\n\r\nexport default loaderModel;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n    StoreProvider,\n    createStore,\n    persist,\n} from 'easy-peasy';\nimport model from './models';\n\nconst store = createStore(\n    persist(model, { allow: ['accountModel'] })\n);\n\nReactDOM.render(\n    <React.StrictMode>\n        <StoreProvider store={store}>\n            <App />\n        </StoreProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}