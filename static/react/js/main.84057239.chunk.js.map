{"version":3,"sources":["App.js","reportWebVitals.js","models/index.js","models/accountModel.js","models/loaderModel.js","index.js"],"names":["Navbar","lazy","Home","window","injectStyle","App","className","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","accountModel","user_logged_in","token","user_data","login","thunk","actions","a","email","password","toggleLoader","fetch","method","headers","Headers","Accept","body","JSON","stringify","resp","json","res","status","console","log","setToken","setUserData","user","toast","dark","error","message","logout","catch","e","finally","register","name","verifyUser","savedToken","cookies","load","undefined","Authorization","err","action","state","save","expires","Date","data","remove","loaderModel","loader_shown","toggle","createStore","persist","model","allow","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"js/main.84057239.chunk.js","sourcesContent":["import { Suspense, lazy } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport { injectStyle } from 'react-toastify/dist/inject-style';\n\nimport './App.css';\n\nconst Navbar = lazy(() => import('./components/Navbar'));\nconst Home = lazy(() => import('./components/Home'));\n\nif (typeof window !== 'undefined') {\n    injectStyle();\n}\n\nfunction App() {\n    return (\n        <div className='App background-main'>\n            <Suspense fallback={<></>}>\n                <ToastContainer />\n                <Navbar />\n                <Home />\n            </Suspense>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import accountModel from './accountModel';\r\nimport loaderModel from './loaderModel';\r\n\r\nconst store = {\r\n    accountModel: accountModel,\r\n    loaderModel: loaderModel,\r\n};\r\n\r\nexport default store;\r\n","import { thunk, action } from 'easy-peasy';\r\nimport cookies from 'react-cookies';\r\nimport { toast } from 'react-toastify';\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n    // STORE\r\n    user_logged_in: false,\r\n    token: null,\r\n    user_data: {},\r\n\r\n    // THUNKS\r\n    login: thunk(\r\n        async (\r\n            actions,\r\n            { email, password, toggleLoader }\r\n        ) => {\r\n            fetch(`/auth/login/`, {\r\n                method: 'POST',\r\n                headers: new Headers({\r\n                    'Content-Type': 'application/json',\r\n                    Accept: 'application/json',\r\n                }),\r\n                body: JSON.stringify({\r\n                    email: email,\r\n                    password: password,\r\n                }),\r\n            })\r\n                .then(async (resp) => {\r\n                    const res = await resp.json();\r\n\r\n                    if (resp.status === 202) {\r\n                        console.log(res);\r\n                        actions.setToken(res.token);\r\n                        actions.setUserData(res.user);\r\n                        toast.dark(\r\n                            'Logged in Successfully!'\r\n                        );\r\n                    } else {\r\n                        toast.error(res.message);\r\n                        console.log(res);\r\n                        actions.logout();\r\n                    }\r\n                })\r\n                .catch((e) => {\r\n                    toast.error('Internal Server Error');\r\n                    // console.log(e);\r\n                    actions.logout();\r\n                })\r\n                .finally(() => {\r\n                    toggleLoader(false);\r\n                });\r\n        }\r\n    ),\r\n\r\n    register: thunk(\r\n        async (\r\n            actions,\r\n            { email, password, name, toggleLoader }\r\n        ) => {\r\n            fetch(`/auth/register/`, {\r\n                method: 'POST',\r\n                headers: new Headers({\r\n                    'Content-Type': 'application/json',\r\n                    Accept: 'application/json',\r\n                }),\r\n                body: JSON.stringify({\r\n                    email: email,\r\n                    password: password,\r\n                    name: name,\r\n                }),\r\n            })\r\n                .then(async (resp) => {\r\n                    const res = await resp.json();\r\n\r\n                    if (resp.status === 201) {\r\n                        // console.log(res);\r\n                        actions.setToken(res.token);\r\n                        actions.setUserData(res.user);\r\n                        toast.dark(\r\n                            'Registered in successfully'\r\n                        );\r\n                    } else {\r\n                        toast.error(res.message);\r\n                        // console.log(res);\r\n                        actions.logout();\r\n                    }\r\n                })\r\n                .catch((e) => {\r\n                    toast.error('Internal Server Error');\r\n                    // console.log(e);\r\n                    actions.logout();\r\n                    toggleLoader(false);\r\n                })\r\n                .finally(() => toggleLoader(false));\r\n        }\r\n    ),\r\n\r\n    verifyUser: thunk(async (actions) => {\r\n        let savedToken = cookies.load('Token');\r\n        console.log('Hello');\r\n\r\n        if (savedToken === undefined) {\r\n            actions.logout();\r\n        } else\r\n            fetch(`/auth/verify`, {\r\n                method: 'GET',\r\n                headers: new Headers({\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: savedToken,\r\n                }),\r\n            })\r\n                .then(\r\n                    async (res) => {\r\n                        let resp = await res.json();\r\n                        console.log(resp);\r\n\r\n                        if (res.status === 202)\r\n                            actions.setUserData(resp);\r\n                        else {\r\n                            actions.logout();\r\n                        }\r\n                    },\r\n                    (err) => {\r\n                        // console.log(err);\r\n                        actions.logout();\r\n                    }\r\n                )\r\n                .catch((e) => {\r\n                    // console.log(e);\r\n                    actions.logout();\r\n                });\r\n    }),\r\n\r\n    // ACTIONS\r\n    setToken: action(async (state, token) => {\r\n        cookies.save('Token', `Token ${token}`, {\r\n            expires: new Date('05-03-2022'),\r\n        });\r\n        state.token = token;\r\n    }),\r\n    setUserData: action(async (state, data) => {\r\n        const token = cookies.load('Token');\r\n        state.token = token;\r\n        state.user_logged_in = true;\r\n        state.user_data = data;\r\n    }),\r\n    logout: action((state) => {\r\n        // console.log('Logging out');\r\n        cookies.remove('Token');\r\n        state.user_logged_in = false;\r\n        state.token = null;\r\n        state.user_data = {};\r\n    }),\r\n};\r\n","import { action } from 'easy-peasy';\r\n\r\nconst loaderModel = {\r\n    // STORE\r\n    loader_shown: false,\r\n\r\n    // ACTIONS\r\n    toggleLoader: action((state, toggle) => {\r\n        state.loader_shown = toggle;\r\n    }),\r\n};\r\n\r\nexport default loaderModel;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n    StoreProvider,\n    createStore,\n    persist,\n} from 'easy-peasy';\nimport model from './models';\n\nconst store = createStore(\n    persist(model, { allow: ['accountModel'] })\n);\n\nReactDOM.render(\n    <React.StrictMode>\n        <StoreProvider store={store}>\n            <App />\n        </StoreProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}